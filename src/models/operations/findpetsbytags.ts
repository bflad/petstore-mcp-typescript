/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ApiErrorInvalidInput,
  ApiErrorInvalidInput$zodSchema,
} from "../components/apierrorinvalidinput.js";
import {
  ApiErrorNotFound,
  ApiErrorNotFound$zodSchema,
} from "../components/apierrornotfound.js";
import {
  ApiErrorUnauthorized,
  ApiErrorUnauthorized$zodSchema,
} from "../components/apierrorunauthorized.js";
import { Pet, Pet$zodSchema } from "../components/pet.js";

export type FindPetsByTagsRequest = { tags?: Array<string> | undefined };

export const FindPetsByTagsRequest$zodSchema: z.ZodType<
  FindPetsByTagsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.array(z.string()).describe("Tags to filter by").optional(),
});

export type FindPetsByTagsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Pets?: Array<Pet> | undefined;
  ApiErrorInvalidInput?: ApiErrorInvalidInput | undefined;
  ApiErrorUnauthorized?: ApiErrorUnauthorized | undefined;
  ApiErrorNotFound?: ApiErrorNotFound | undefined;
};

export const FindPetsByTagsResponse$zodSchema: z.ZodType<
  FindPetsByTagsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApiErrorInvalidInput: ApiErrorInvalidInput$zodSchema.optional(),
  ApiErrorNotFound: ApiErrorNotFound$zodSchema.optional(),
  ApiErrorUnauthorized: ApiErrorUnauthorized$zodSchema.optional(),
  ContentType: z.string(),
  Pets: z.array(Pet$zodSchema).describe("successful operation").optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
