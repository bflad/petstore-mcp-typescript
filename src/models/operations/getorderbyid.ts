/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ApiErrorInvalidInput,
  ApiErrorInvalidInput$zodSchema,
} from "../components/apierrorinvalidinput.js";
import {
  ApiErrorNotFound,
  ApiErrorNotFound$zodSchema,
} from "../components/apierrornotfound.js";
import {
  ApiErrorUnauthorized,
  ApiErrorUnauthorized$zodSchema,
} from "../components/apierrorunauthorized.js";
import { Order, Order$zodSchema } from "../components/order.js";

export type GetOrderByIdRequest = { orderId: number };

export const GetOrderByIdRequest$zodSchema: z.ZodType<
  GetOrderByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderId: z.number().int().describe("ID of order that needs to be fetched"),
});

export type GetOrderByIdResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Order?: Order | undefined;
  ApiErrorInvalidInput?: ApiErrorInvalidInput | undefined;
  ApiErrorUnauthorized?: ApiErrorUnauthorized | undefined;
  ApiErrorNotFound?: ApiErrorNotFound | undefined;
};

export const GetOrderByIdResponse$zodSchema: z.ZodType<
  GetOrderByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApiErrorInvalidInput: ApiErrorInvalidInput$zodSchema.optional(),
  ApiErrorNotFound: ApiErrorNotFound$zodSchema.optional(),
  ApiErrorUnauthorized: ApiErrorUnauthorized$zodSchema.optional(),
  ContentType: z.string(),
  Order: Order$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
