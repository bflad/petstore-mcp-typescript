/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ApiErrorInvalidInput,
  ApiErrorInvalidInput$zodSchema,
} from "../components/apierrorinvalidinput.js";
import {
  ApiErrorNotFound,
  ApiErrorNotFound$zodSchema,
} from "../components/apierrornotfound.js";
import {
  ApiErrorUnauthorized,
  ApiErrorUnauthorized$zodSchema,
} from "../components/apierrorunauthorized.js";

export type LoginUserRequest = {
  username?: string | undefined;
  password?: string | undefined;
};

export const LoginUserRequest$zodSchema: z.ZodType<
  LoginUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  password: z.string().describe("The password for login in clear text")
    .optional(),
  username: z.string().describe("The user name for login").optional(),
});

export type LoginUserResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  string?: string | undefined;
  ApiErrorInvalidInput?: ApiErrorInvalidInput | undefined;
  ApiErrorUnauthorized?: ApiErrorUnauthorized | undefined;
  ApiErrorNotFound?: ApiErrorNotFound | undefined;
  Headers: { [k: string]: Array<string> };
};

export const LoginUserResponse$zodSchema: z.ZodType<
  LoginUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApiErrorInvalidInput: ApiErrorInvalidInput$zodSchema.optional(),
  ApiErrorNotFound: ApiErrorNotFound$zodSchema.optional(),
  ApiErrorUnauthorized: ApiErrorUnauthorized$zodSchema.optional(),
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  string: z.string().describe("successful operation").optional(),
});
