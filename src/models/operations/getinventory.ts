/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ApiErrorNotFound,
  ApiErrorNotFound$zodSchema,
} from "../components/apierrornotfound.js";
import {
  ApiErrorUnauthorized,
  ApiErrorUnauthorized$zodSchema,
} from "../components/apierrorunauthorized.js";

export type GetInventoryResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: { [k: string]: number } | undefined;
  ApiErrorUnauthorized?: ApiErrorUnauthorized | undefined;
  ApiErrorNotFound?: ApiErrorNotFound | undefined;
};

export const GetInventoryResponse$zodSchema: z.ZodType<
  GetInventoryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApiErrorNotFound: ApiErrorNotFound$zodSchema.optional(),
  ApiErrorUnauthorized: ApiErrorUnauthorized$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.record(z.number().int()).describe("successful operation")
    .optional(),
});
